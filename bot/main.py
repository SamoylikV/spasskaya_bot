import asyncio
import logging
import asyncpg
from datetime import datetime
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command, CommandObject
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from config import TOKEN, DB_URL
from db.db import create_appeal, add_message, init_db

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)


class RoomInput(StatesGroup):
    waiting_room = State()


class UserAppeal(StatesGroup):
    waiting_text = State()
    waiting_reply = State()


async def show_main_menu(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì© –û–±—Ä–∞—â–µ–Ω–∏–µ (—Ä–µ—Å–µ–ø—à–µ–Ω)", callback_data="menu_appeal")],
        [InlineKeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="menu_contacts")]
    ])
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


async def show_user_menu_after_room(message: Message, state: FSMContext):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üõè –£–±—Ä–∞—Ç—å—Å—è –≤ –Ω–æ–º–µ—Ä–µ")],
            [KeyboardButton(text="üç¥ –ü—Ä–∏–Ω–µ—Å—Ç–∏ –µ–¥—É")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await state.set_state(UserAppeal.waiting_text)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –≥–æ—Ç–æ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=keyboard)


@router.message(Command("start"))
async def start(message: Message, command: CommandObject, state: FSMContext):
    args = command.args
    if args and args.isdigit():
        await state.update_data(room=args)
        await show_user_menu_after_room(message, state)
        return

    await show_main_menu(message)


@router.callback_query(F.data == "menu_appeal")
async def menu_appeal(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    room = data.get("room")
    if room:
        await show_user_menu_after_room(callback.message, state)
    else:
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã (—á–∏—Å–ª–æ–º):")
        await state.set_state(RoomInput.waiting_room)


@router.callback_query(F.data == "menu_contacts")
async def menu_contacts(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer("–ö–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ç–µ–ª—è:\nüìû +7 (812) 000-00-00\nüìç –ê–¥—Ä–µ—Å: —É–ª. –°–ø–∞—Å—Å–∫–∞—è, –¥.1\nüåê –°–∞–π—Ç: https://spasskaya.example")


@router.message(RoomInput.waiting_room)
async def get_room(message: Message, state: FSMContext):
    if not message.text or not message.text.isdigit():
        await message.answer("‚ùå –ù–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel.")
        return
    await state.update_data(room=message.text)
    await show_user_menu_after_room(message, state)


@router.message(Command("cancel"))
async def cancel_cmd(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start.")


@router.message(Command("help"))
async def help_cmd(message: Message):
    help_text = """üè® <b>–ë–æ—Ç –æ—Ç–µ–ª—è '–°–ø–∞—Å—Å–∫–∞—è'</b>

üìã <b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É
/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ

üì© <b>–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ:</b>
1. –ù–∞–∂–º–∏—Ç–µ /start –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–û–±—Ä–∞—â–µ–Ω–∏–µ (—Ä–µ—Å–µ–ø—à–µ–Ω)"
2. –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–æ–º–Ω–∞—Ç—ã
3. –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–µ

üí¨ <b>–û—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>
‚Ä¢ –ö–æ–≥–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç, –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –æ–±—Ä–∞—Ç–Ω–æ
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–≤–µ—Ç–∏—Ç—å" –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ

üîÑ <b>–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞:</b>
–ù–∞–∂–º–∏—Ç–µ "–ù–µ —Ä–µ—à–µ–Ω–æ" –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏

üìû <b>–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:</b>
–ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É —É–∫–∞–∑–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É: /start 101"""
    
    await message.answer(help_text, parse_mode="HTML")


@router.message(UserAppeal.waiting_text)
async def user_appeal_text(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or str(user_id)
    data = await state.get_data()
    room = data.get("room", "–Ω–µ —É–∫–∞–∑–∞–Ω")

    text = message.text.strip()

    appeal_id = await create_appeal(user_id, username, room, text)
    await add_message(appeal_id, "user", text)

    await message.answer("–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ", reply_markup=ReplyKeyboardRemove())
    await state.clear()


@router.callback_query(F.data.startswith("user_reopen:"))
async def user_reopen(callback: CallbackQuery):
    await callback.answer()
    try:
        _, appeal_id = callback.data.split(":")
        appeal_id = int(appeal_id)
    except Exception:
        await callback.message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID.")
        return
    
    conn = await asyncpg.connect(DB_URL)
    try:
        await conn.execute("UPDATE appeals SET status = 'new' WHERE id = $1", appeal_id)
    finally:
        await conn.close()
        
    await callback.message.answer("–ú—ã —Å–Ω–æ–≤–∞ –ø–µ—Ä–µ–¥–∞–ª–∏ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ‚úÖ")


@router.callback_query(F.data.startswith("user_reply:"))
async def user_start_reply(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    try:
        _, appeal_id = callback.data.split(":")
        appeal_id = int(appeal_id)
    except Exception:
        await callback.message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID.")
        return
    
    await state.update_data(reply_appeal_id=appeal_id)
    await state.set_state(UserAppeal.waiting_reply)
    
    await callback.message.answer(
        "‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç."
    )


@router.message(UserAppeal.waiting_reply)
async def user_reply_text(message: Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    appeal_id = data.get("reply_appeal_id")
    
    if not appeal_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: ID –æ–±—Ä–∞—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return
    
    text = message.text.strip()
    
    await add_message(appeal_id, "user", text)
    
    conn = await asyncpg.connect(DB_URL)
    try:
        appeal = await conn.fetchrow("SELECT username, room FROM appeals WHERE id = $1", appeal_id)
        if appeal:
            await conn.execute(
                "UPDATE appeals SET status = 'new', updated_at = NOW() WHERE id = $1 AND status != 'new'", 
                appeal_id
            )
            
            logger.info(f"New user reply on appeal {appeal_id}: {text}")
            logger.info(f"Appeal {appeal_id} status updated to 'new' due to user reply")
    finally:
        await conn.close()
    
    await message.answer("‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
    await state.clear()


@dp.errors()
async def global_error_handler(event, data):
    exception = data.get('exception')
    logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–ø–¥–µ–π—Ç–∞: %s", exception)


async def check_message_queue():
    while True:
        try:
            conn = await asyncpg.connect(DB_URL)
            try:
                pending_messages = await conn.fetch(
                    """SELECT id, user_id, message, appeal_id, created_at 
                       FROM pending_admin_messages 
                       WHERE sent = FALSE 
                       AND created_at <= NOW() - INTERVAL '2 seconds'
                       ORDER BY created_at LIMIT 10"""
                )
                
                for msg in pending_messages:
                    try:

                        await conn.execute(
                            "UPDATE pending_admin_messages SET sent = TRUE WHERE id = $1",
                            msg['id']
                        )
                        
                        message_text = msg['message']
                        reply_markup = None
                        
                        if msg['appeal_id']:
                            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
                            buttons = []
                            
                            if '–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' in message_text or '–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ' in message_text:
                                buttons.append([InlineKeyboardButton(text="‚úèÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"user_reply:{msg['appeal_id']}")])
                            
                            if '–≤—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ' in message_text:
                                buttons.append([InlineKeyboardButton(text="‚ùå –ù–µ —Ä–µ—à–µ–Ω–æ", callback_data=f"user_reopen:{msg['appeal_id']}")])
                            
                            if buttons:
                                reply_markup = InlineKeyboardMarkup(inline_keyboard=buttons)
                        
                        await bot.send_message(
                            msg['user_id'],
                            message_text,
                            reply_markup=reply_markup
                        )
                        
                        logger.info(f"Sent admin message to user {msg['user_id']}")
                        
                    except Exception as e:
                        logger.error(f"Failed to send message to user {msg['user_id']}: {e}")

                        try:
                            await conn.execute(
                                "UPDATE pending_admin_messages SET sent = FALSE WHERE id = $1",
                                msg['id']
                            )
                        except Exception as rollback_error:
                            logger.error(f"Failed to rollback message status: {rollback_error}")
                        
            finally:
                await conn.close()
                
        except Exception as e:
            logger.error(f"Error checking message queue: {e}")
        
        await asyncio.sleep(5)

async def main():
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î...")
    await init_db()
    
    conn = await asyncpg.connect(DB_URL)
    try:
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS pending_admin_messages (
                id SERIAL PRIMARY KEY,
                user_id BIGINT NOT NULL,
                message TEXT NOT NULL,
                appeal_id INTEGER,
                sent BOOLEAN DEFAULT FALSE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
    finally:
        await conn.close()
    
    logger.info("–ó–∞–ø—É—Å–∫ polling –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    asyncio.create_task(check_message_queue())
    
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")