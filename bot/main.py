import asyncio
import logging
import asyncpg
from datetime import datetime
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command, CommandObject
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from config import TOKEN, ADMIN_ID, DB_URL
from db.db import create_appeal, add_message, get_appeals, update_status, init_db, is_admin, add_admin
from bot.admin_panel import admin_router

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)
dp.include_router(admin_router)


class AdminReply(StatesGroup):
    waiting_text = State()


class RoomInput(StatesGroup):
    waiting_room = State()


class UserAppeal(StatesGroup):
    waiting_text = State()



async def show_main_menu(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì© –û–±—Ä–∞—â–µ–Ω–∏–µ (—Ä–µ—Å–µ–ø—à–µ–Ω)", callback_data="menu_appeal")],
        # [InlineKeyboardButton(text="üõé –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)", callback_data="menu_booking")],
        [InlineKeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="menu_contacts")]
    ])
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


async def show_user_menu_after_room(message: Message, state: FSMContext):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üõè –£–±—Ä–∞—Ç—å—Å—è –≤ –Ω–æ–º–µ—Ä–µ")],
            [KeyboardButton(text="üç¥ –ü—Ä–∏–Ω–µ—Å—Ç–∏ –µ–¥—É")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await state.set_state(UserAppeal.waiting_text)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –≥–æ—Ç–æ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=keyboard)


@router.message(Command("start"))
async def start(message: Message, command: CommandObject, state: FSMContext):
    args = command.args
    if args and args.isdigit():
        await state.update_data(room=args)
        await show_user_menu_after_room(message, state)
        return

    await show_main_menu(message)


@router.callback_query(F.data == "menu_appeal")
async def menu_appeal(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    room = data.get("room")
    if room:
        await show_user_menu_after_room(callback.message, state)
    else:
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã (—á–∏—Å–ª–æ–º):")
        await state.set_state(RoomInput.waiting_room)


@router.callback_query(F.data == "menu_booking")
async def menu_booking(callback: CallbackQuery):
    await callback.answer("–§—É–Ω–∫—Ü–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.", show_alert=True)


@router.callback_query(F.data == "menu_contacts")
async def menu_contacts(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer("–ö–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ç–µ–ª—è:\nüìû +7 (812) 000-00-00\nüìç –ê–¥—Ä–µ—Å: —É–ª. –°–ø–∞—Å—Å–∫–∞—è, –¥.1\nüåê –°–∞–π—Ç: https://spasskaya.example")


@router.message(RoomInput.waiting_room)
async def get_room(message: Message, state: FSMContext):
    if not message.text or not message.text.isdigit():
        await message.answer("‚ùå –ù–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel.")
        return
    await state.update_data(room=message.text)
    await show_user_menu_after_room(message, state)


@router.message(Command("cancel"))
async def cancel_cmd(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start.")


@router.message(Command("help"))
async def help_cmd(message: Message):
    await message.answer("–≠—Ç–æ –±–æ—Ç –æ—Ç–µ–ª—è '–°–ø–∞—Å—Å–∫–∞—è'.\n"
                         "/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                         "/admin ‚Äî –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)\n"
                         "/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n"
                         "–î–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è —Å–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ /start 101 –∏–ª–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ.")


# @router.callback_query(F.data.startswith("task_"))
# async def task_chosen(callback: CallbackQuery, state: FSMContext):
#     await callback.answer()
#     user_id = callback.from_user.id
#     username = callback.from_user.username or str(user_id)
#     data = await state.get_data()
#     room = data.get("room", "–Ω–µ —É–∫–∞–∑–∞–Ω")

#     text_map = {
#         "task_clean": "–£–±—Ä–∞—Ç—å—Å—è –≤ –Ω–æ–º–µ—Ä–µ",
#         "task_food": "–ü—Ä–∏–Ω–µ—Å—Ç–∏ –µ–¥—É",
#         "task_other": "–î—Ä—É–≥–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ"
#     }
#     key = callback.data
#     text = text_map.get(key, "–î—Ä—É–≥–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ")

#     appeal_id = await create_appeal(user_id, username, room, text)
#     await add_message(appeal_id, "user", text)

#     keyboard = InlineKeyboardMarkup(inline_keyboard=[
#         [
#             InlineKeyboardButton(text="‚úÖ –ü–æ–ª—É—á–µ–Ω–æ", callback_data=f"admin_status:{appeal_id}:received"),
#             InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ", callback_data=f"admin_status:{appeal_id}:declined"),
#             InlineKeyboardButton(text="‚úî –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"admin_status:{appeal_id}:done"),
#             InlineKeyboardButton(text="‚úâ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"admin_reply:{appeal_id}")
#         ]
#     ])

#     await bot.send_message(ADMIN_ID, f"üì© –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç @{username} (–∫–æ–º–Ω–∞—Ç–∞ {room})\nüìù {text}", reply_markup=keyboard)
#     await callback.message.answer("–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ")

@router.message(UserAppeal.waiting_text)
async def user_appeal_text(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or str(user_id)
    data = await state.get_data()
    room = data.get("room", "–Ω–µ —É–∫–∞–∑–∞–Ω")

    text = message.text.strip()

    appeal_id = await create_appeal(user_id, username, room, text)
    await add_message(appeal_id, "user", text)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–ª—É—á–µ–Ω–æ", callback_data=f"admin_status:{appeal_id}:received"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ", callback_data=f"admin_status:{appeal_id}:declined"),
            InlineKeyboardButton(text="‚úî –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"admin_status:{appeal_id}:done"),
            InlineKeyboardButton(text="‚úâ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"admin_reply:{appeal_id}")
        ]
    ])

    await bot.send_message(
        ADMIN_ID,
        f"üì© –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç @{username} (–∫–æ–º–Ω–∞—Ç–∞ {room})\nüìù {text}",
        reply_markup=keyboard
    )

    await message.answer("–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ", reply_markup=ReplyKeyboardRemove())
    await state.clear()



@router.callback_query(F.data.startswith("user_reopen:"))
async def user_reopen(callback: CallbackQuery):
    await callback.answer()
    try:
        _, appeal_id = callback.data.split(":")
        appeal_id = int(appeal_id)
    except Exception:
        await callback.message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID.")
        return
    await update_status(appeal_id, "new")
    await bot.send_message(ADMIN_ID, f"‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã–ª –æ–±—Ä–∞—â–µ–Ω–∏–µ ID {appeal_id}")
    await callback.message.answer("–ú—ã —Å–Ω–æ–≤–∞ –ø–µ—Ä–µ–¥–∞–ª–∏ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ‚úÖ")




@dp.errors()
async def global_error_handler(event, data):
    exception = data.get('exception')
    logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–ø–¥–µ–π—Ç–∞: %s", exception)


async def main():
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î...")
    await init_db()
    
    try:
        if ADMIN_ID:
            await add_admin(int(ADMIN_ID), "main_admin", "super_admin")
            logger.info(f"–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω {ADMIN_ID} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞: {e}")
    
    logger.info("–ó–∞–ø—É—Å–∫ polling...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")