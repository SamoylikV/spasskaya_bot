import asyncio
import logging
import asyncpg
from datetime import datetime
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, FSInputFile
from aiogram.filters import Command, CommandObject
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from config import TOKEN, DB_URL
from db.db import create_appeal, add_message, init_db

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)


class RoomInput(StatesGroup):
    waiting_room = State()


class UserAppeal(StatesGroup):
    waiting_text = State()
    waiting_reply = State()
    waiting_comment = State()
    waiting_custom_problem = State()


async def show_main_menu(message: Message):
    await send_welcome_with_photo(message)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–æ–º–Ω–∞—Ç—ã:")


async def show_service_menu(message: Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üßπ –ù—É–∂–µ–Ω —É—Ç—é–≥ –∏ –≥–ª–∞–¥–∏–ª—å–Ω–∞—è –¥–æ—Å–∫–∞", callback_data="service_iron")],
        [InlineKeyboardButton(text="üëï –£—Å–ª—É–≥–∏ –ø—Ä–∞—á–µ—á–Ω–æ–π", callback_data="service_laundry")],
        [InlineKeyboardButton(text="üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –≤ –Ω–æ–º–µ—Ä–µ", callback_data="service_technical")],
        [InlineKeyboardButton(text="üçΩ –£—Å–ª—É–≥–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞", callback_data="service_restaurant")],
        [InlineKeyboardButton(text="‚ùì –î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å", callback_data="service_other")],
        [InlineKeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="menu_contacts"), InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main_menu")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=keyboard)


@router.message(Command("start"))
async def start(message: Message, command: CommandObject, state: FSMContext):
    args = command.args
    if args and args.isdigit():
        await state.update_data(room=args)
        await send_welcome_with_photo(message)
        await show_service_menu(message, state)
        return

    await show_main_menu(message)
    await state.set_state(RoomInput.waiting_room)

async def send_welcome_with_photo(message: Message):
    welcome_text = """
üè® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ç–µ–ª—å "–°–ø–∞—Å—Å–∫–∞—è"!

–ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:

üõé –ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥–∏ –Ω–æ–º–µ—Ä–∞
üçΩ –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
üîß –°–æ–æ–±—â–∏—Ç—å –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º–∏ —Å–ª—É–∂–±–∞–º–∏

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–æ–º–Ω–∞—Ç—ã.
"""
    
    try:
        current_dir = os.path.dirname(os.path.abspath(__file__))
        photo_path = os.path.join(current_dir, '..', 'images', 'hotel_welcome.jpg')
        photo_path = os.path.abspath(photo_path)

        logger.info(f"Looking for photo at: {photo_path}")
        logger.info(f"Photo exists: {os.path.exists(photo_path)}")

        if os.path.exists(photo_path):
            photo = FSInputFile(photo_path)
            await message.answer_photo(photo, caption=welcome_text)
            logger.info("Photo sent successfully")
        else:
            logger.warning(f"Photo not found at {photo_path}")
            await message.answer(welcome_text)
    except Exception as e:
        logger.error(f"Error sending photo: {e}")
        logger.error(f"Exception type: {type(e)}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        await message.answer(welcome_text)


@router.callback_query(F.data == "back_main_menu")
async def back_main_menu(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    await show_main_menu(callback.message)
    await state.set_state(RoomInput.waiting_room)


@router.callback_query(F.data == "menu_contacts")
async def menu_contacts(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    contacts_text = """
üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ç–µ–ª—è:
+7 (345) 255-00-08
8 800 700-55-08

üìû –†–µ—Å–µ–ø—à–Ω: –≤–Ω. 101
üçΩ –†–µ—Å—Ç–æ—Ä–∞–Ω: –≤–Ω. 122

üåê –°–∞–π—Ç: hotel-spasskaya.ru
üìß –ü–æ—á—Ç–∞: info@hotel-spasskaya.ru
"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º", callback_data="back_services")]
    ])
    await callback.message.answer(contacts_text, reply_markup=keyboard)


@router.message(RoomInput.waiting_room)
async def get_room(message: Message, state: FSMContext):
    if not message.text or not message.text.isdigit():
        await message.answer("‚ùå –ù–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel.")
        return
    await state.update_data(room=message.text)
    await message.answer(f"‚úÖ –ù–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã: {message.text}")
    await show_service_menu(message, state)


@router.message(Command("cancel"))
async def cancel_cmd(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start.")


@router.message(Command("help"))
async def help_cmd(message: Message):
    help_text = """üè® <b>–ë–æ—Ç –æ—Ç–µ–ª—è '–°–ø–∞—Å—Å–∫–∞—è'</b>

üìã <b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É
/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ

üì© <b>–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ:</b>
1. –ù–∞–∂–º–∏—Ç–µ /start –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–û–±—Ä–∞—â–µ–Ω–∏–µ (—Ä–µ—Å–µ–ø—à–µ–Ω)"
2. –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–æ–º–Ω–∞—Ç—ã
3. –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–µ

üí¨ <b>–û—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>
‚Ä¢ –ö–æ–≥–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç, –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –æ–±—Ä–∞—Ç–Ω–æ
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–≤–µ—Ç–∏—Ç—å" –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ

üîÑ <b>–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞:</b>
–ù–∞–∂–º–∏—Ç–µ "–ù–µ —Ä–µ—à–µ–Ω–æ" –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏

üìû <b>–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:</b>
–ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É —É–∫–∞–∑–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É: /start 101"""
    
    await message.answer(help_text, parse_mode="HTML")


async def create_service_request(user_id, username, room, service_type, description, optional_comment=None):
    conn = await asyncpg.connect(DB_URL)
    try:
        appeal_id = await conn.fetchval(
            "INSERT INTO appeals (user_id, username, room, text, request_type, optional_comment) VALUES ($1,$2,$3,$4,$5,$6) RETURNING id",
            user_id, username, room, description, service_type, optional_comment
        )
        await add_message(appeal_id, "user", description)
        if optional_comment:
            await add_message(appeal_id, "user", f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {optional_comment}")
    finally:
        await conn.close()
    return appeal_id

async def ask_for_comment(message: Message, state: FSMContext, service_text: str, service_type: str):
    await state.update_data(service_text=service_text, service_type=service_type)
    await state.set_state(UserAppeal.waiting_comment)
    await message.answer(f"{service_text}\n\n–ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):")

@router.callback_query(F.data == "service_iron")
async def service_iron(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    response_text = "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ, —É–∂–µ –Ω–µ—Å–µ–º!"
    await ask_for_comment(callback.message, state, response_text, "iron")

@router.callback_query(F.data == "service_laundry")
async def service_laundry(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    response_text = "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ, –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    await ask_for_comment(callback.message, state, response_text, "laundry")

@router.callback_query(F.data == "service_technical")
async def service_technical(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùÑÔ∏è –ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä", callback_data="tech_ac")],
        [InlineKeyboardButton(text="üì∂ WiFi", callback_data="tech_wifi")],
        [InlineKeyboardButton(text="üì∫ –¢–µ–ª–µ–≤–∏–∑–æ—Ä", callback_data="tech_tv")],
        [InlineKeyboardButton(text="üîß –î—Ä—É–≥–æ–µ", callback_data="tech_other")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_services")]
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–±–ª–µ–º—ã:", reply_markup=keyboard)

@router.callback_query(F.data == "tech_ac")
async def tech_ac(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    response_text = "–°–ø–∞—Å–∏–±–æ! –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –¢–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —Å–ª—É–∂–±—É"
    await ask_for_comment(callback.message, state, response_text, "technical_ac")

@router.callback_query(F.data == "tech_wifi")
async def tech_wifi(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    response_text = "–°–ø–∞—Å–∏–±–æ! –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ IT-—Å–ª—É–∂–±—É"
    await ask_for_comment(callback.message, state, response_text, "technical_wifi")

@router.callback_query(F.data == "tech_tv")
async def tech_tv(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    response_text = "–°–ø–∞—Å–∏–±–æ! –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –¢–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —Å–ª—É–∂–±—É"
    await ask_for_comment(callback.message, state, response_text, "technical_tv")

@router.callback_query(F.data == "tech_other")
async def tech_other(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(UserAppeal.waiting_custom_problem)
    await callback.message.answer("–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:")

@router.callback_query(F.data == "service_restaurant")
async def service_restaurant(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –ú–µ–Ω—é —Ä—É–º-—Å–µ—Ä–≤–∏—Å", callback_data="menu_room_service")],
        [InlineKeyboardButton(text="üçΩ –ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞", callback_data="menu_restaurant")],
        [InlineKeyboardButton(text="üìû –°–æ–µ–¥–∏–Ω–∏—Ç–µ —Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º", callback_data="connect_restaurant")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_services")]
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞:", reply_markup=keyboard)

@router.callback_query(F.data == "menu_room_service")
async def menu_room_service(callback: CallbackQuery):
    await callback.answer()
    try:
        current_dir = os.path.dirname(os.path.abspath(__file__))
        menu_path = os.path.join(current_dir, '..', 'menus', 'room_service_menu.pdf')
        menu_path = os.path.abspath(menu_path)
        
        if os.path.exists(menu_path):
            menu_file = FSInputFile(menu_path)
            await callback.message.answer_document(menu_file, caption="üìã –ú–µ–Ω—é —Ä—É–º-—Å–µ—Ä–≤–∏—Å")
        else:
            await callback.message.answer("üìã –ú–µ–Ω—é —Ä—É–º-—Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    except Exception:
        await callback.message.answer("üìã –ú–µ–Ω—é —Ä—É–º-—Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

@router.callback_query(F.data == "menu_restaurant")
async def menu_restaurant(callback: CallbackQuery):
    await callback.answer()
    try:
        current_dir = os.path.dirname(os.path.abspath(__file__))
        menu_path = os.path.join(current_dir, '..', 'menus', 'restaurant_menu.pdf')
        menu_path = os.path.abspath(menu_path)
        
        if os.path.exists(menu_path):
            menu_file = FSInputFile(menu_path)
            await callback.message.answer_document(menu_file, caption="üçΩ –ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞")
        else:
            await callback.message.answer("üçΩ –ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    except Exception:
        await callback.message.answer("üçΩ –ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

@router.callback_query(F.data == "connect_restaurant")
async def connect_restaurant(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    response_text = "–ú—ã –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è"
    await ask_for_comment(callback.message, state, response_text, "restaurant_call")

@router.callback_query(F.data == "service_other")
async def service_other(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(UserAppeal.waiting_custom_problem)
    await callback.message.answer("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å:")

@router.callback_query(F.data == "back_services")
async def back_services(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await show_service_menu(callback.message, state)

@router.callback_query(F.data == "new_request")
async def new_request(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await show_service_menu(callback.message, state)


@router.message(UserAppeal.waiting_comment)
async def handle_comment(message: Message, state: FSMContext):
    comment = message.text.strip()
    data = await state.get_data()
    service_text = data.get("service_text", "")
    service_type = data.get("service_type", "other")

    await process_service_request(message, state, comment)

    if comment:
        await add_message(data.get("last_appeal_id"), "user", f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")
        await message.answer("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –∫ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ!")

@router.message(UserAppeal.waiting_custom_problem)
async def handle_custom_problem(message: Message, state: FSMContext):
    problem_text = message.text.strip()
    await state.update_data(service_text=problem_text, service_type="custom")
    await process_service_request(message, state, None)

async def process_service_request(message: Message, state: FSMContext, comment: str = None):
    user_id = message.from_user.id
    username = message.from_user.username or str(user_id)
    data = await state.get_data()
    room = data.get("room", "–Ω–µ —É–∫–∞–∑–∞–Ω")
    service_text = data.get("service_text", "")
    service_type = data.get("service_type", "other")

    appeal_id = await create_service_request(user_id, username, room, service_type, service_text, comment)

    await state.update_data(last_appeal_id=appeal_id)

    await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    await show_service_menu(message, state)


@router.callback_query(F.data.startswith("user_reopen:"))
async def user_reopen(callback: CallbackQuery):
    await callback.answer()
    try:
        _, appeal_id = callback.data.split(":")
        appeal_id = int(appeal_id)
    except Exception:
        await callback.message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID.")
        return
    
    conn = await asyncpg.connect(DB_URL)
    try:
        await conn.execute("UPDATE appeals SET status = 'new' WHERE id = $1", appeal_id)
    finally:
        await conn.close()
        
    await callback.message.answer("–ú—ã —Å–Ω–æ–≤–∞ –ø–µ—Ä–µ–¥–∞–ª–∏ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ‚úÖ")


@router.callback_query(F.data.startswith("user_reply:"))
async def user_start_reply(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    try:
        _, appeal_id = callback.data.split(":")
        appeal_id = int(appeal_id)
    except Exception:
        await callback.message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID.")
        return
    
    await state.update_data(reply_appeal_id=appeal_id)
    await state.set_state(UserAppeal.waiting_reply)
    
    await callback.message.answer(
        "‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç."
    )


@router.message(UserAppeal.waiting_reply)
async def user_reply_text(message: Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    appeal_id = data.get("reply_appeal_id")
    
    if not appeal_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: ID –æ–±—Ä–∞—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return
    
    text = message.text.strip()
    
    await add_message(appeal_id, "user", text)
    
    conn = await asyncpg.connect(DB_URL)
    try:
        appeal = await conn.fetchrow("SELECT username, room FROM appeals WHERE id = $1", appeal_id)
        if appeal:
            await conn.execute(
                "UPDATE appeals SET status = 'new', updated_at = NOW() WHERE id = $1 AND status != 'new'", 
                appeal_id
            )
            
            logger.info(f"New user reply on appeal {appeal_id}: {text}")
            logger.info(f"Appeal {appeal_id} status updated to 'new' due to user reply")
    finally:
        await conn.close()
    
    await message.answer("‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
    await state.clear()


@dp.errors()
async def global_error_handler(event, data):
    exception = data.get('exception')
    logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–ø–¥–µ–π—Ç–∞: %s", exception)


async def check_message_queue():
    while True:
        try:
            conn = await asyncpg.connect(DB_URL)
            try:
                pending_messages = await conn.fetch(
                    """SELECT id, user_id, message, appeal_id, created_at 
                       FROM pending_admin_messages 
                       WHERE sent = FALSE 
                       AND created_at <= NOW() - INTERVAL '2 seconds'
                       ORDER BY created_at LIMIT 10"""
                )
                
                for msg in pending_messages:
                    try:

                        await conn.execute(
                            "UPDATE pending_admin_messages SET sent = TRUE WHERE id = $1",
                            msg['id']
                        )
                        
                        message_text = msg['message']
                        reply_markup = None
                        
                        if msg['appeal_id']:
                            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
                            buttons = []
                            
                            if '–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' in message_text or '–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ' in message_text:
                                buttons.append([InlineKeyboardButton(text="‚úèÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"user_reply:{msg['appeal_id']}")])
                            
                            if '–≤—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ' in message_text:
                                buttons.append([InlineKeyboardButton(text="‚ùå –ù–µ —Ä–µ—à–µ–Ω–æ", callback_data=f"user_reopen:{msg['appeal_id']}")])
                            
                            if buttons:
                                reply_markup = InlineKeyboardMarkup(inline_keyboard=buttons)
                        
                        await bot.send_message(
                            msg['user_id'],
                            message_text,
                            reply_markup=reply_markup
                        )
                        
                        logger.info(f"Sent admin message to user {msg['user_id']}")
                        
                    except Exception as e:
                        logger.error(f"Failed to send message to user {msg['user_id']}: {e}")

                        try:
                            await conn.execute(
                                "UPDATE pending_admin_messages SET sent = FALSE WHERE id = $1",
                                msg['id']
                            )
                        except Exception as rollback_error:
                            logger.error(f"Failed to rollback message status: {rollback_error}")
                        
            finally:
                await conn.close()
                
        except Exception as e:
            logger.error(f"Error checking message queue: {e}")
        
        await asyncio.sleep(5)

async def main():
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î...")
    await init_db()
    
    conn = await asyncpg.connect(DB_URL)
    try:
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS pending_admin_messages (
                id SERIAL PRIMARY KEY,
                user_id BIGINT NOT NULL,
                message TEXT NOT NULL,
                appeal_id INTEGER,
                sent BOOLEAN DEFAULT FALSE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
    finally:
        await conn.close()
    
    logger.info("–ó–∞–ø—É—Å–∫ polling –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    asyncio.create_task(check_message_queue())
    
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")