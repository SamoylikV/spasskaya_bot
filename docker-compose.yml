services:
  db:
    image: postgres:15
    env_file: .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  bot:
    build:
      context: .
      dockerfile: bot/Dockerfile
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./bot:/app/bot
      - ./config.py:/app/config.py
      - ./db:/app/db

  web:
    build:
      context: .
      dockerfile: web/Dockerfile
    env_file: .env
    ports:
      - "8001:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./web:/app/web
      - ./config.py:/app/config.py
      - ./db:/app/db
    restart: unless-stopped

  bridge:
    build:
      context: .
      dockerfile: bridge/Dockerfile
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./bridge:/app/bridge
      - ./config.py:/app/config.py
      - ./db:/app/db
    restart: unless-stopped

volumes:
  pgdata:
  redis_data:
